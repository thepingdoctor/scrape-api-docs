# Kubernetes Secrets Template
# IMPORTANT: This is a template file. DO NOT commit actual secrets to version control.
# Use tools like sealed-secrets, external-secrets, or Vault for production.

apiVersion: v1
kind: Secret
metadata:
  name: scraper-secrets
  namespace: scraper
type: Opaque
stringData:
  # Database connection
  database-url: "postgresql://scraper:CHANGEME@postgres-service:5432/scraper"

  # Redis password
  redis-password: "CHANGEME_REDIS_PASSWORD"

  # AWS credentials (for S3 storage)
  aws-access-key-id: "CHANGEME_AWS_ACCESS_KEY"
  aws-secret-access-key: "CHANGEME_AWS_SECRET_KEY"

  # API keys (if needed)
  api-secret-key: "CHANGEME_SECRET_KEY_FOR_JWT"

  # Additional secrets
  encryption-key: "CHANGEME_32_CHAR_ENCRYPTION_KEY"

---
# Example using External Secrets Operator (Recommended for production)
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: scraper-secrets
  namespace: scraper
spec:
  secretStoreRef:
    name: vault-backend
    kind: ClusterSecretStore

  target:
    name: scraper-secrets
    creationPolicy: Owner

  data:
  - secretKey: database-url
    remoteRef:
      key: scraper/prod/database
      property: url

  - secretKey: redis-password
    remoteRef:
      key: scraper/prod/redis
      property: password

  - secretKey: aws-access-key-id
    remoteRef:
      key: scraper/prod/aws
      property: access_key_id

  - secretKey: aws-secret-access-key
    remoteRef:
      key: scraper/prod/aws
      property: secret_access_key

  - secretKey: api-secret-key
    remoteRef:
      key: scraper/prod/api
      property: secret_key

---
# Service Account for API
apiVersion: v1
kind: ServiceAccount
metadata:
  name: scraper-api
  namespace: scraper
  annotations:
    # AWS IAM role for service accounts (IRSA)
    eks.amazonaws.com/role-arn: arn:aws:iam::ACCOUNT_ID:role/scraper-api-role

---
# Service Account for Worker
apiVersion: v1
kind: ServiceAccount
metadata:
  name: scraper-worker
  namespace: scraper
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::ACCOUNT_ID:role/scraper-worker-role

---
# RBAC: Role for API pods
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: scraper-api-role
  namespace: scraper
rules:
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list", "watch"]

---
# RBAC: RoleBinding for API
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: scraper-api-rolebinding
  namespace: scraper
subjects:
- kind: ServiceAccount
  name: scraper-api
  namespace: scraper
roleRef:
  kind: Role
  name: scraper-api-role
  apiGroup: rbac.authorization.k8s.io
