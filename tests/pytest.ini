[pytest]
# Pytest configuration for scrape-api-docs test suite

# Test discovery patterns
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Minimum Python version
minversion = 3.8

# Test paths
testpaths = tests

# Command line options
addopts =
    # Verbose output
    -v
    # Show summary of all test outcomes
    -ra
    # Show local variables in tracebacks
    -l
    # Enable strict markers
    --strict-markers
    # Coverage options
    --cov=src/scrape_api_docs
    --cov=examples
    --cov-report=html
    --cov-report=term-missing
    --cov-report=xml
    # Fail if coverage is below 85%
    --cov-fail-under=85
    # Show warnings
    -W default
    # Disable output capture for debugging (comment out for normal runs)
    # -s

# Markers
markers =
    unit: Unit tests for individual functions
    integration: Integration tests for component interactions
    e2e: End-to-end tests for full workflows
    security: Security-focused tests
    performance: Performance and benchmark tests
    slow: Tests that take longer to run
    requires_network: Tests that require network access (skipped by default)

# Coverage options
[coverage:run]
source = src/scrape_api_docs,examples
omit =
    */tests/*
    */test_*.py
    */__pycache__/*
    */site-packages/*
    */venv/*
    */examples/integration/*

[coverage:report]
precision = 2
show_missing = True
skip_covered = False
exclude_lines =
    # Standard pragma
    pragma: no cover
    # Don't complain about missing debug code
    def __repr__
    # Don't complain if tests don't hit defensive assertion code
    raise AssertionError
    raise NotImplementedError
    # Don't complain about abstract methods
    @abstractmethod
    # Don't complain about if TYPE_CHECKING
    if TYPE_CHECKING:
    # Don't complain about __main__ blocks
    if __name__ == .__main__.:

[coverage:html]
directory = htmlcov
